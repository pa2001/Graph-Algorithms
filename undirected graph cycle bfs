#include<bits/stdc++.h>
using namespace std;
vector<string>color;
vector<int>v,p;
void addedge(vector<int>g[],int u,int v)
{
  g[u].push_back(v);
  g[v].push_back(u);
}
bool bfs(vector<int>g[],int s)
{
  queue<int>q;
  q.push(s);
  v[s]=true;
  while(!q.empty())
  {
    int u=q.front();
    q.pop();
    for(auto x:g[u])
    {
      if(!v[x])
      {
        v[x]=true;
        q.push(x);
        p[x]=u;
      }
      else if(p[u]!=x)
      return true;
    }
  }return false;
}
bool bfsd(vector<int>g[],int n)
{
  for(int i=0;i<n;i++)
  {
    if(!v[i]&&bfs(g,i))
    return true;
  }return false;
}
int main()
{
  int n,a,b,e;
  cin>>n>>e;
  vector<int>g[n];
  v.assign(n,0);
  p.assign(n,-1);
  for(int i=0;i<e;i++)
  {
    cin>>a>>b;
    addedge(g,a,b);
  }
  cout<<bfsd(g,n);
}
